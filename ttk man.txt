Help on module tkinter.ttk in tkinter:

NAME
    tkinter.ttk - Ttk wrapper.

MODULE REFERENCE
    https://docs.python.org/3.7/library/tkinter.ttk
    
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    This module provides classes to allow using Tk themed widget set.
    
    Ttk is based on a revised and enhanced version of
    TIP #48 (http://tip.tcl.tk/48) specified style engine.
    
    Its basic idea is to separate, to the extent possible, the code
    implementing a widget's behavior from the code implementing its
    appearance. Widget class bindings are primarily responsible for
    maintaining the widget state and invoking callbacks, all aspects
    of the widgets appearance lies at Themes.

CLASSES
    builtins.object
        Style
    tkinter.Entry(tkinter.Widget, tkinter.XView)
        Entry(Widget, tkinter.Entry)
            Combobox
            Spinbox
    tkinter.PanedWindow(tkinter.Widget)
        Panedwindow(Widget, tkinter.PanedWindow)
    tkinter.Scale(tkinter.Widget)
        Scale(Widget, tkinter.Scale)
    tkinter.Scrollbar(tkinter.Widget)
        Scrollbar(Widget, tkinter.Scrollbar)
    tkinter.XView(builtins.object)
        Treeview(Widget, tkinter.XView, tkinter.YView)
    tkinter.YView(builtins.object)
        Treeview(Widget, tkinter.XView, tkinter.YView)
    Widget(tkinter.Widget)
        Button
        Checkbutton
        Entry(Widget, tkinter.Entry)
            Combobox
            Spinbox
        Frame
            LabeledScale
        Label
        Labelframe
        Menubutton
            OptionMenu
        Notebook
        Panedwindow(Widget, tkinter.PanedWindow)
        Progressbar
        Radiobutton
        Scale(Widget, tkinter.Scale)
        Scrollbar(Widget, tkinter.Scrollbar)
        Separator
        Sizegrip
        Treeview(Widget, tkinter.XView, tkinter.YView)
    
    class Button(Widget)
     |  Button(master=None, **kw)
     |  
     |  Ttk Button widget, displays a textual label and/or image, and
     |  evaluates a command when pressed.
     |  
     |  Method resolution order:
     |      Button
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Button widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, state, style, takefocus,
     |          text, textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, default, width
     |  
     |  invoke(self)
     |      Invokes the command associated with the button.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Checkbutton(Widget)
     |  Checkbutton(master=None, **kw)
     |  
     |  Ttk Checkbutton widget which is either in on- or off-state.
     |  
     |  Method resolution order:
     |      Checkbutton
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Checkbutton widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, state, style, takefocus,
     |          text, textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, offvalue, onvalue, variable
     |  
     |  invoke(self)
     |      Toggles between the selected and deselected states and
     |      invokes the associated command. If the widget is currently
     |      selected, sets the option variable to the offvalue option
     |      and deselects the widget; otherwise, sets the option variable
     |      to the option onvalue.
     |      
     |      Returns the result of the associated command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Combobox(Entry)
     |  Combobox(master=None, **kw)
     |  
     |  Ttk Combobox widget combines a text field with a pop-down list of
     |  values.
     |  
     |  Method resolution order:
     |      Combobox
     |      Entry
     |      Widget
     |      tkinter.Entry
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      tkinter.XView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Combobox widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          exportselection, justify, height, postcommand, state,
     |          textvariable, values, width
     |  
     |  current(self, newindex=None)
     |      If newindex is supplied, sets the combobox value to the
     |      element at position newindex in the list of values. Otherwise,
     |      returns the index of the current value in the list of values
     |      or -1 if the current value does not appear in the list.
     |  
     |  set(self, value)
     |      Sets the value of the combobox to value.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Entry:
     |  
     |  bbox(self, index)
     |      Return a tuple of (x, y, width, height) which describes the
     |      bounding box of the character given by index.
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the
     |      empty string if the coordinates are outside the window.
     |  
     |  validate(self)
     |      Force revalidation, independent of the conditions specified
     |      by the validate option. Returns False if validation fails, True
     |      if it succeeds. Sets or clears the invalid state accordingly.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Entry:
     |  
     |  delete(self, first, last=None)
     |      Delete text from FIRST to LAST (not included).
     |  
     |  get(self)
     |      Return the text.
     |  
     |  icursor(self, index)
     |      Insert cursor at INDEX.
     |  
     |  index(self, index)
     |      Return position of cursor.
     |  
     |  insert(self, index, string)
     |      Insert STRING at INDEX.
     |  
     |  scan_dragto(self, x)
     |      Adjust the view of the canvas to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  scan_mark(self, x)
     |      Remember the current X, Y coordinates.
     |  
     |  select_adjust = selection_adjust(self, index)
     |  
     |  select_clear = selection_clear(self)
     |  
     |  select_from = selection_from(self, index)
     |  
     |  select_present = selection_present(self)
     |  
     |  select_range = selection_range(self, start, end)
     |  
     |  select_to = selection_to(self, index)
     |  
     |  selection_adjust(self, index)
     |      Adjust the end of the selection near the cursor to INDEX.
     |  
     |  selection_clear(self)
     |      Clear the selection if it is in this widget.
     |  
     |  selection_from(self, index)
     |      Set the fixed end of a selection to INDEX.
     |  
     |  selection_present(self)
     |      Return True if there are characters selected in the entry, False
     |      otherwise.
     |  
     |  selection_range(self, start, end)
     |      Set the selection from START to END (not included).
     |  
     |  selection_to(self, index)
     |      Set the variable end of a selection to INDEX.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.XView:
     |  
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
    
    class Entry(Widget, tkinter.Entry)
     |  Entry(master=None, widget=None, **kw)
     |  
     |  Ttk Entry widget displays a one-line text string and allows that
     |  string to be edited by the user.
     |  
     |  Method resolution order:
     |      Entry
     |      Widget
     |      tkinter.Entry
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      tkinter.XView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, widget=None, **kw)
     |      Constructs a Ttk Entry widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus, xscrollcommand
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          exportselection, invalidcommand, justify, show, state,
     |          textvariable, validate, validatecommand, width
     |      
     |      VALIDATION MODES
     |      
     |          none, key, focus, focusin, focusout, all
     |  
     |  bbox(self, index)
     |      Return a tuple of (x, y, width, height) which describes the
     |      bounding box of the character given by index.
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the
     |      empty string if the coordinates are outside the window.
     |  
     |  validate(self)
     |      Force revalidation, independent of the conditions specified
     |      by the validate option. Returns False if validation fails, True
     |      if it succeeds. Sets or clears the invalid state accordingly.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Entry:
     |  
     |  delete(self, first, last=None)
     |      Delete text from FIRST to LAST (not included).
     |  
     |  get(self)
     |      Return the text.
     |  
     |  icursor(self, index)
     |      Insert cursor at INDEX.
     |  
     |  index(self, index)
     |      Return position of cursor.
     |  
     |  insert(self, index, string)
     |      Insert STRING at INDEX.
     |  
     |  scan_dragto(self, x)
     |      Adjust the view of the canvas to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  scan_mark(self, x)
     |      Remember the current X, Y coordinates.
     |  
     |  select_adjust = selection_adjust(self, index)
     |  
     |  select_clear = selection_clear(self)
     |  
     |  select_from = selection_from(self, index)
     |  
     |  select_present = selection_present(self)
     |  
     |  select_range = selection_range(self, start, end)
     |  
     |  select_to = selection_to(self, index)
     |  
     |  selection_adjust(self, index)
     |      Adjust the end of the selection near the cursor to INDEX.
     |  
     |  selection_clear(self)
     |      Clear the selection if it is in this widget.
     |  
     |  selection_from(self, index)
     |      Set the fixed end of a selection to INDEX.
     |  
     |  selection_present(self)
     |      Return True if there are characters selected in the entry, False
     |      otherwise.
     |  
     |  selection_range(self, start, end)
     |      Set the selection from START to END (not included).
     |  
     |  selection_to(self, index)
     |      Set the variable end of a selection to INDEX.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.XView:
     |  
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
    
    class Frame(Widget)
     |  Frame(master=None, **kw)
     |  
     |  Ttk Frame widget is a container, used to group other widgets
     |  together.
     |  
     |  Method resolution order:
     |      Frame
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Frame with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          borderwidth, relief, padding, width, height
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Label(Widget)
     |  Label(master=None, **kw)
     |  
     |  Ttk Label widget displays a textual label and/or image.
     |  
     |  Method resolution order:
     |      Label
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Label with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, style, takefocus, text,
     |          textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          anchor, background, font, foreground, justify, padding,
     |          relief, text, wraplength
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    LabelFrame = class Labelframe(Widget)
     |  LabelFrame(master=None, **kw)
     |  
     |  Ttk Labelframe widget is a container used to group other widgets
     |  together. It has an optional label, which may be a plain text string
     |  or another widget.
     |  
     |  Method resolution order:
     |      Labelframe
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Labelframe with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |          labelanchor, text, underline, padding, labelwidget, width,
     |          height
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class LabeledScale(Frame)
     |  LabeledScale(master=None, variable=None, from_=0, to=10, **kw)
     |  
     |  A Ttk Scale widget with a Ttk Label widget indicating its
     |  current value.
     |  
     |  The Ttk Scale can be accessed through instance.scale, and Ttk Label
     |  can be accessed through instance.label
     |  
     |  Method resolution order:
     |      LabeledScale
     |      Frame
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, variable=None, from_=0, to=10, **kw)
     |      Construct a horizontal LabeledScale with parent master, a
     |      variable to be associated with the Ttk Scale widget and its range.
     |      If variable is not specified, a tkinter.IntVar is created.
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          compound: 'top' or 'bottom'
     |              Specifies how to display the label relative to the scale.
     |              Defaults to 'top'.
     |  
     |  destroy(self)
     |      Destroy this widget and possibly its associated variable.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  value
     |      Return current scale value.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Labelframe(Widget)
     |  Labelframe(master=None, **kw)
     |  
     |  Ttk Labelframe widget is a container used to group other widgets
     |  together. It has an optional label, which may be a plain text string
     |  or another widget.
     |  
     |  Method resolution order:
     |      Labelframe
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Labelframe with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |          labelanchor, text, underline, padding, labelwidget, width,
     |          height
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Menubutton(Widget)
     |  Menubutton(master=None, **kw)
     |  
     |  Ttk Menubutton widget displays a textual label and/or image, and
     |  displays a menu when pressed.
     |  
     |  Method resolution order:
     |      Menubutton
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Menubutton with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, state, style, takefocus,
     |          text, textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          direction, menu
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Notebook(Widget)
     |  Notebook(master=None, **kw)
     |  
     |  Ttk Notebook widget manages a collection of windows and displays
     |  a single one at a time. Each child window is associated with a tab,
     |  which the user may select to change the currently-displayed window.
     |  
     |  Method resolution order:
     |      Notebook
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Notebook with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          height, padding, width
     |      
     |      TAB OPTIONS
     |      
     |          state, sticky, padding, text, image, compound, underline
     |      
     |      TAB IDENTIFIERS (tab_id)
     |      
     |          The tab_id argument found in several methods may take any of
     |          the following forms:
     |      
     |              * An integer between zero and the number of tabs
     |              * The name of a child window
     |              * A positional specification of the form "@x,y", which
     |                defines the tab
     |              * The string "current", which identifies the
     |                currently-selected tab
     |              * The string "end", which returns the number of tabs (only
     |                valid for method index)
     |  
     |  add(self, child, **kw)
     |      Adds a new tab to the notebook.
     |      
     |      If window is currently managed by the notebook but hidden, it is
     |      restored to its previous position.
     |  
     |  enable_traversal(self)
     |      Enable keyboard traversal for a toplevel window containing
     |      this notebook.
     |      
     |      This will extend the bindings for the toplevel window containing
     |      this notebook as follows:
     |      
     |          Control-Tab: selects the tab following the currently selected
     |                       one
     |      
     |          Shift-Control-Tab: selects the tab preceding the currently
     |                             selected one
     |      
     |          Alt-K: where K is the mnemonic (underlined) character of any
     |                 tab, will select that tab.
     |      
     |      Multiple notebooks in a single toplevel may be enabled for
     |      traversal, including nested notebooks. However, notebook traversal
     |      only works properly if all panes are direct children of the
     |      notebook.
     |  
     |  forget(self, tab_id)
     |      Removes the tab specified by tab_id, unmaps and unmanages the
     |      associated window.
     |  
     |  hide(self, tab_id)
     |      Hides the tab specified by tab_id.
     |      
     |      The tab will not be displayed, but the associated window remains
     |      managed by the notebook and its configuration remembered. Hidden
     |      tabs may be restored with the add command.
     |  
     |  identify(self, x, y)
     |      Returns the name of the tab element at position x, y, or the
     |      empty string if none.
     |  
     |  index(self, tab_id)
     |      Returns the numeric index of the tab specified by tab_id, or
     |      the total number of tabs if tab_id is the string "end".
     |  
     |  insert(self, pos, child, **kw)
     |      Inserts a pane at the specified position.
     |      
     |      pos is either the string end, an integer index, or the name of
     |      a managed child. If child is already managed by the notebook,
     |      moves it to the specified position.
     |  
     |  select(self, tab_id=None)
     |      Selects the specified tab.
     |      
     |      The associated child window will be displayed, and the
     |      previously-selected window (if different) is unmapped. If tab_id
     |      is omitted, returns the widget name of the currently selected
     |      pane.
     |  
     |  tab(self, tab_id, option=None, **kw)
     |      Query or modify the options of the specific tab_id.
     |      
     |      If kw is not given, returns a dict of the tab option values. If option
     |      is specified, returns the value of that option. Otherwise, sets the
     |      options to the corresponding values.
     |  
     |  tabs(self)
     |      Returns a list of windows managed by the notebook.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class OptionMenu(Menubutton)
     |  OptionMenu(master, variable, default=None, *values, **kwargs)
     |  
     |  Themed OptionMenu, based after tkinter's OptionMenu, which allows
     |  the user to select a value from a menu.
     |  
     |  Method resolution order:
     |      OptionMenu
     |      Menubutton
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(self, item)
     |      Return the resource value for a KEY given as string.
     |  
     |  __init__(self, master, variable, default=None, *values, **kwargs)
     |      Construct a themed OptionMenu widget with master as the parent,
     |      the resource textvariable set to variable, the initially selected
     |      value specified by the default parameter, the menu values given by
     |      *values and additional keywords.
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          style: stylename
     |              Menubutton style.
     |          direction: 'above', 'below', 'left', 'right', or 'flush'
     |              Menubutton direction.
     |          command: callback
     |              A callback that will be invoked after selecting an item.
     |  
     |  destroy(self)
     |      Destroy this widget and its associated variable.
     |  
     |  set_menu(self, default=None, *values)
     |      Build a new menu of radiobuttons with *values and optionally
     |      a default value.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    PanedWindow = class Panedwindow(Widget, tkinter.PanedWindow)
     |  PanedWindow(master=None, **kw)
     |  
     |  Ttk Panedwindow widget displays a number of subwindows, stacked
     |  either vertically or horizontally.
     |  
     |  Method resolution order:
     |      Panedwindow
     |      Widget
     |      tkinter.PanedWindow
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Panedwindow with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          orient, width, height
     |      
     |      PANE OPTIONS
     |      
     |          weight
     |  
     |  forget = remove(self, child)
     |  
     |  insert(self, pos, child, **kw)
     |      Inserts a pane at the specified positions.
     |      
     |      pos is either the string end, and integer index, or the name
     |      of a child. If child is already managed by the paned window,
     |      moves it to the specified position.
     |  
     |  pane(self, pane, option=None, **kw)
     |      Query or modify the options of the specified pane.
     |      
     |      pane is either an integer index or the name of a managed subwindow.
     |      If kw is not given, returns a dict of the pane option values. If
     |      option is specified then the value for that option is returned.
     |      Otherwise, sets the options to the corresponding values.
     |  
     |  sashpos(self, index, newpos=None)
     |      If newpos is specified, sets the position of sash number index.
     |      
     |      May adjust the positions of adjacent sashes to ensure that
     |      positions are monotonically increasing. Sash positions are further
     |      constrained to be between 0 and the total size of the widget.
     |      
     |      Returns the new position of sash number index.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.PanedWindow:
     |  
     |  add(self, child, **kw)
     |      Add a child widget to the panedwindow in a new pane.
     |      
     |      The child argument is the name of the child widget
     |      followed by pairs of arguments that specify how to
     |      manage the windows. The possible options and values
     |      are the ones accepted by the paneconfigure method.
     |  
     |  panecget(self, child, option)
     |      Query a management option for window.
     |      
     |      Option may be any value allowed by the paneconfigure subcommand
     |  
     |  paneconfig = paneconfigure(self, tagOrId, cnf=None, **kw)
     |  
     |  paneconfigure(self, tagOrId, cnf=None, **kw)
     |      Query or modify the management options for window.
     |      
     |      If no option is specified, returns a list describing all
     |      of the available options for pathName.  If option is
     |      specified with no value, then the command returns a list
     |      describing the one named option (this list will be identical
     |      to the corresponding sublist of the value returned if no
     |      option is specified). If one or more option-value pairs are
     |      specified, then the command modifies the given widget
     |      option(s) to have the given value(s); in this case the
     |      command returns an empty string. The following options
     |      are supported:
     |      
     |      after window
     |          Insert the window after the window specified. window
     |          should be the name of a window already managed by pathName.
     |      before window
     |          Insert the window before the window specified. window
     |          should be the name of a window already managed by pathName.
     |      height size
     |          Specify a height for the window. The height will be the
     |          outer dimension of the window including its border, if
     |          any. If size is an empty string, or if -height is not
     |          specified, then the height requested internally by the
     |          window will be used initially; the height may later be
     |          adjusted by the movement of sashes in the panedwindow.
     |          Size may be any value accepted by Tk_GetPixels.
     |      minsize n
     |          Specifies that the size of the window cannot be made
     |          less than n. This constraint only affects the size of
     |          the widget in the paned dimension -- the x dimension
     |          for horizontal panedwindows, the y dimension for
     |          vertical panedwindows. May be any value accepted by
     |          Tk_GetPixels.
     |      padx n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the X-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      pady n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the Y-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      sticky style
     |          If a window's pane is larger than the requested
     |          dimensions of the window, this option may be used
     |          to position (or stretch) the window within its pane.
     |          Style is a string that contains zero or more of the
     |          characters n, s, e or w. The string can optionally
     |          contains spaces or commas, but they are ignored. Each
     |          letter refers to a side (north, south, east, or west)
     |          that the window will "stick" to. If both n and s
     |          (or e and w) are specified, the window will be
     |          stretched to fill the entire height (or width) of
     |          its cavity.
     |      width size
     |          Specify a width for the window. The width will be
     |          the outer dimension of the window including its
     |          border, if any. If size is an empty string, or
     |          if -width is not specified, then the width requested
     |          internally by the window will be used initially; the
     |          width may later be adjusted by the movement of sashes
     |          in the panedwindow. Size may be any value accepted by
     |          Tk_GetPixels.
     |  
     |  panes(self)
     |      Returns an ordered list of the child panes.
     |  
     |  proxy(self, *args)
     |      Internal function.
     |  
     |  proxy_coord(self)
     |      Return the x and y pair of the most recent proxy location
     |  
     |  proxy_forget(self)
     |      Remove the proxy from the display.
     |  
     |  proxy_place(self, x, y)
     |      Place the proxy at the given x and y coordinates.
     |  
     |  remove(self, child)
     |      Remove the pane containing child from the panedwindow
     |      
     |      All geometry management options for child will be forgotten.
     |  
     |  sash(self, *args)
     |      Internal function.
     |  
     |  sash_coord(self, index)
     |      Return the current x and y pair for the sash given by index.
     |      
     |      Index must be an integer between 0 and 1 less than the
     |      number of panes in the panedwindow. The coordinates given are
     |      those of the top left corner of the region containing the sash.
     |      pathName sash dragto index x y This command computes the
     |      difference between the given coordinates and the coordinates
     |      given to the last sash coord command for the given sash. It then
     |      moves that sash the computed difference. The return value is the
     |      empty string.
     |  
     |  sash_mark(self, index)
     |      Records x and y for the sash given by index;
     |      
     |      Used in conjunction with later dragto commands to move the sash.
     |  
     |  sash_place(self, index, x, y)
     |      Place the sash given by index at the given coordinates
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Panedwindow(Widget, tkinter.PanedWindow)
     |  Panedwindow(master=None, **kw)
     |  
     |  Ttk Panedwindow widget displays a number of subwindows, stacked
     |  either vertically or horizontally.
     |  
     |  Method resolution order:
     |      Panedwindow
     |      Widget
     |      tkinter.PanedWindow
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Panedwindow with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          orient, width, height
     |      
     |      PANE OPTIONS
     |      
     |          weight
     |  
     |  forget = remove(self, child)
     |  
     |  insert(self, pos, child, **kw)
     |      Inserts a pane at the specified positions.
     |      
     |      pos is either the string end, and integer index, or the name
     |      of a child. If child is already managed by the paned window,
     |      moves it to the specified position.
     |  
     |  pane(self, pane, option=None, **kw)
     |      Query or modify the options of the specified pane.
     |      
     |      pane is either an integer index or the name of a managed subwindow.
     |      If kw is not given, returns a dict of the pane option values. If
     |      option is specified then the value for that option is returned.
     |      Otherwise, sets the options to the corresponding values.
     |  
     |  sashpos(self, index, newpos=None)
     |      If newpos is specified, sets the position of sash number index.
     |      
     |      May adjust the positions of adjacent sashes to ensure that
     |      positions are monotonically increasing. Sash positions are further
     |      constrained to be between 0 and the total size of the widget.
     |      
     |      Returns the new position of sash number index.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.PanedWindow:
     |  
     |  add(self, child, **kw)
     |      Add a child widget to the panedwindow in a new pane.
     |      
     |      The child argument is the name of the child widget
     |      followed by pairs of arguments that specify how to
     |      manage the windows. The possible options and values
     |      are the ones accepted by the paneconfigure method.
     |  
     |  panecget(self, child, option)
     |      Query a management option for window.
     |      
     |      Option may be any value allowed by the paneconfigure subcommand
     |  
     |  paneconfig = paneconfigure(self, tagOrId, cnf=None, **kw)
     |  
     |  paneconfigure(self, tagOrId, cnf=None, **kw)
     |      Query or modify the management options for window.
     |      
     |      If no option is specified, returns a list describing all
     |      of the available options for pathName.  If option is
     |      specified with no value, then the command returns a list
     |      describing the one named option (this list will be identical
     |      to the corresponding sublist of the value returned if no
     |      option is specified). If one or more option-value pairs are
     |      specified, then the command modifies the given widget
     |      option(s) to have the given value(s); in this case the
     |      command returns an empty string. The following options
     |      are supported:
     |      
     |      after window
     |          Insert the window after the window specified. window
     |          should be the name of a window already managed by pathName.
     |      before window
     |          Insert the window before the window specified. window
     |          should be the name of a window already managed by pathName.
     |      height size
     |          Specify a height for the window. The height will be the
     |          outer dimension of the window including its border, if
     |          any. If size is an empty string, or if -height is not
     |          specified, then the height requested internally by the
     |          window will be used initially; the height may later be
     |          adjusted by the movement of sashes in the panedwindow.
     |          Size may be any value accepted by Tk_GetPixels.
     |      minsize n
     |          Specifies that the size of the window cannot be made
     |          less than n. This constraint only affects the size of
     |          the widget in the paned dimension -- the x dimension
     |          for horizontal panedwindows, the y dimension for
     |          vertical panedwindows. May be any value accepted by
     |          Tk_GetPixels.
     |      padx n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the X-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      pady n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the Y-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      sticky style
     |          If a window's pane is larger than the requested
     |          dimensions of the window, this option may be used
     |          to position (or stretch) the window within its pane.
     |          Style is a string that contains zero or more of the
     |          characters n, s, e or w. The string can optionally
     |          contains spaces or commas, but they are ignored. Each
     |          letter refers to a side (north, south, east, or west)
     |          that the window will "stick" to. If both n and s
     |          (or e and w) are specified, the window will be
     |          stretched to fill the entire height (or width) of
     |          its cavity.
     |      width size
     |          Specify a width for the window. The width will be
     |          the outer dimension of the window including its
     |          border, if any. If size is an empty string, or
     |          if -width is not specified, then the width requested
     |          internally by the window will be used initially; the
     |          width may later be adjusted by the movement of sashes
     |          in the panedwindow. Size may be any value accepted by
     |          Tk_GetPixels.
     |  
     |  panes(self)
     |      Returns an ordered list of the child panes.
     |  
     |  proxy(self, *args)
     |      Internal function.
     |  
     |  proxy_coord(self)
     |      Return the x and y pair of the most recent proxy location
     |  
     |  proxy_forget(self)
     |      Remove the proxy from the display.
     |  
     |  proxy_place(self, x, y)
     |      Place the proxy at the given x and y coordinates.
     |  
     |  remove(self, child)
     |      Remove the pane containing child from the panedwindow
     |      
     |      All geometry management options for child will be forgotten.
     |  
     |  sash(self, *args)
     |      Internal function.
     |  
     |  sash_coord(self, index)
     |      Return the current x and y pair for the sash given by index.
     |      
     |      Index must be an integer between 0 and 1 less than the
     |      number of panes in the panedwindow. The coordinates given are
     |      those of the top left corner of the region containing the sash.
     |      pathName sash dragto index x y This command computes the
     |      difference between the given coordinates and the coordinates
     |      given to the last sash coord command for the given sash. It then
     |      moves that sash the computed difference. The return value is the
     |      empty string.
     |  
     |  sash_mark(self, index)
     |      Records x and y for the sash given by index;
     |      
     |      Used in conjunction with later dragto commands to move the sash.
     |  
     |  sash_place(self, index, x, y)
     |      Place the sash given by index at the given coordinates
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Progressbar(Widget)
     |  Progressbar(master=None, **kw)
     |  
     |  Ttk Progressbar widget shows the status of a long-running
     |  operation. They can operate in two modes: determinate mode shows the
     |  amount completed relative to the total amount of work to be done, and
     |  indeterminate mode provides an animated display to let the user know
     |  that something is happening.
     |  
     |  Method resolution order:
     |      Progressbar
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Progressbar with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          orient, length, mode, maximum, value, variable, phase
     |  
     |  start(self, interval=None)
     |      Begin autoincrement mode: schedules a recurring timer event
     |      that calls method step every interval milliseconds.
     |      
     |      interval defaults to 50 milliseconds (20 steps/second) if omitted.
     |  
     |  step(self, amount=None)
     |      Increments the value option by amount.
     |      
     |      amount defaults to 1.0 if omitted.
     |  
     |  stop(self)
     |      Stop autoincrement mode: cancels any recurring timer event
     |      initiated by start.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Radiobutton(Widget)
     |  Radiobutton(master=None, **kw)
     |  
     |  Ttk Radiobutton widgets are used in groups to show or change a
     |  set of mutually-exclusive options.
     |  
     |  Method resolution order:
     |      Radiobutton
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Radiobutton with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, state, style, takefocus,
     |          text, textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, value, variable
     |  
     |  invoke(self)
     |      Sets the option variable to the option value, selects the
     |      widget, and invokes the associated command.
     |      
     |      Returns the result of the command, or an empty string if
     |      no command is specified.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Scale(Widget, tkinter.Scale)
     |  Scale(master=None, **kw)
     |  
     |  Ttk Scale widget is typically used to control the numeric value of
     |  a linked variable that varies uniformly over some range.
     |  
     |  Method resolution order:
     |      Scale
     |      Widget
     |      tkinter.Scale
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Scale with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, from, length, orient, to, value, variable
     |  
     |  configure(self, cnf=None, **kw)
     |      Modify or query scale options.
     |      
     |      Setting a value for any of the "from", "from_" or "to" options
     |      generates a <<RangeChanged>> event.
     |  
     |  get(self, x=None, y=None)
     |      Get the current value of the value option, or the value
     |      corresponding to the coordinates x, y if they are specified.
     |      
     |      x and y are pixel coordinates relative to the scale widget
     |      origin.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Scale:
     |  
     |  coords(self, value=None)
     |      Return a tuple (X,Y) of the point along the centerline of the
     |      trough that corresponds to VALUE or the current value if None is
     |      given.
     |  
     |  set(self, value)
     |      Set the value to VALUE.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Scrollbar(Widget, tkinter.Scrollbar)
     |  Scrollbar(master=None, **kw)
     |  
     |  Ttk Scrollbar controls the viewport of a scrollable widget.
     |  
     |  Method resolution order:
     |      Scrollbar
     |      Widget
     |      tkinter.Scrollbar
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Scrollbar with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, orient
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Scrollbar:
     |  
     |  activate(self, index=None)
     |      Marks the element indicated by index as active.
     |      The only index values understood by this method are "arrow1",
     |      "slider", or "arrow2".  If any other value is specified then no
     |      element of the scrollbar will be active.  If index is not specified,
     |      the method returns the name of the element that is currently active,
     |      or None if no element is active.
     |  
     |  delta(self, deltax, deltay)
     |      Return the fractional change of the scrollbar setting if it
     |      would be moved by DELTAX or DELTAY pixels.
     |  
     |  fraction(self, x, y)
     |      Return the fractional value which corresponds to a slider
     |      position of X,Y.
     |  
     |  get(self)
     |      Return the current fractional values (upper and lower end)
     |      of the slider position.
     |  
     |  set(self, first, last)
     |      Set the fractional values of the slider position (upper and
     |      lower ends as value between 0 and 1).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Separator(Widget)
     |  Separator(master=None, **kw)
     |  
     |  Ttk Separator widget displays a horizontal or vertical separator
     |  bar.
     |  
     |  Method resolution order:
     |      Separator
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Separator with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          orient
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Sizegrip(Widget)
     |  Sizegrip(master=None, **kw)
     |  
     |  Ttk Sizegrip allows the user to resize the containing toplevel
     |  window by pressing and dragging the grip.
     |  
     |  Method resolution order:
     |      Sizegrip
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Sizegrip with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, state, style, takefocus
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the empty
     |      string if the point does not lie within any element.
     |      
     |      x and y are pixel coordinates relative to the widget.
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
    
    class Spinbox(Entry)
     |  Spinbox(master=None, **kw)
     |  
     |  Ttk Spinbox is an Entry with increment and decrement arrows
     |  
     |  It is commonly used for number entry or to select from a list of
     |  string values.
     |  
     |  Method resolution order:
     |      Spinbox
     |      Entry
     |      Widget
     |      tkinter.Entry
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      tkinter.XView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Spinbox widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus, validate,
     |          validatecommand, xscrollcommand, invalidcommand
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          to, from_, increment, values, wrap, format, command
     |  
     |  set(self, value)
     |      Sets the value of the Spinbox to value.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Entry:
     |  
     |  bbox(self, index)
     |      Return a tuple of (x, y, width, height) which describes the
     |      bounding box of the character given by index.
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the
     |      empty string if the coordinates are outside the window.
     |  
     |  validate(self)
     |      Force revalidation, independent of the conditions specified
     |      by the validate option. Returns False if validation fails, True
     |      if it succeeds. Sets or clears the invalid state accordingly.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Entry:
     |  
     |  delete(self, first, last=None)
     |      Delete text from FIRST to LAST (not included).
     |  
     |  get(self)
     |      Return the text.
     |  
     |  icursor(self, index)
     |      Insert cursor at INDEX.
     |  
     |  index(self, index)
     |      Return position of cursor.
     |  
     |  insert(self, index, string)
     |      Insert STRING at INDEX.
     |  
     |  scan_dragto(self, x)
     |      Adjust the view of the canvas to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  scan_mark(self, x)
     |      Remember the current X, Y coordinates.
     |  
     |  select_adjust = selection_adjust(self, index)
     |  
     |  select_clear = selection_clear(self)
     |  
     |  select_from = selection_from(self, index)
     |  
     |  select_present = selection_present(self)
     |  
     |  select_range = selection_range(self, start, end)
     |  
     |  select_to = selection_to(self, index)
     |  
     |  selection_adjust(self, index)
     |      Adjust the end of the selection near the cursor to INDEX.
     |  
     |  selection_clear(self)
     |      Clear the selection if it is in this widget.
     |  
     |  selection_from(self, index)
     |      Set the fixed end of a selection to INDEX.
     |  
     |  selection_present(self)
     |      Return True if there are characters selected in the entry, False
     |      otherwise.
     |  
     |  selection_range(self, start, end)
     |      Set the selection from START to END (not included).
     |  
     |  selection_to(self, index)
     |      Set the variable end of a selection to INDEX.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.XView:
     |  
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
    
    class Style(builtins.object)
     |  Style(master=None)
     |  
     |  Manipulate style database.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  configure(self, style, query_opt=None, **kw)
     |      Query or sets the default value of the specified option(s) in
     |      style.
     |      
     |      Each key in kw is an option and each value is either a string or
     |      a sequence identifying the value for that option.
     |  
     |  element_create(self, elementname, etype, *args, **kw)
     |      Create a new element in the current theme of given etype.
     |  
     |  element_names(self)
     |      Returns the list of elements defined in the current theme.
     |  
     |  element_options(self, elementname)
     |      Return the list of elementname's options.
     |  
     |  layout(self, style, layoutspec=None)
     |      Define the widget layout for given style. If layoutspec is
     |      omitted, return the layout specification for given style.
     |      
     |      layoutspec is expected to be a list or an object different than
     |      None that evaluates to False if you want to "turn off" that style.
     |      If it is a list (or tuple, or something else), each item should be
     |      a tuple where the first item is the layout name and the second item
     |      should have the format described below:
     |      
     |      LAYOUTS
     |      
     |          A layout can contain the value None, if takes no options, or
     |          a dict of options specifying how to arrange the element.
     |          The layout mechanism uses a simplified version of the pack
     |          geometry manager: given an initial cavity, each element is
     |          allocated a parcel. Valid options/values are:
     |      
     |              side: whichside
     |                  Specifies which side of the cavity to place the
     |                  element; one of top, right, bottom or left. If
     |                  omitted, the element occupies the entire cavity.
     |      
     |              sticky: nswe
     |                  Specifies where the element is placed inside its
     |                  allocated parcel.
     |      
     |              children: [sublayout... ]
     |                  Specifies a list of elements to place inside the
     |                  element. Each element is a tuple (or other sequence)
     |                  where the first item is the layout name, and the other
     |                  is a LAYOUT.
     |  
     |  lookup(self, style, option, state=None, default=None)
     |      Returns the value specified for option in style.
     |      
     |      If state is specified it is expected to be a sequence of one
     |      or more states. If the default argument is set, it is used as
     |      a fallback value in case no specification for option is found.
     |  
     |  map(self, style, query_opt=None, **kw)
     |      Query or sets dynamic values of the specified option(s) in
     |      style.
     |      
     |      Each key in kw is an option and each value should be a list or a
     |      tuple (usually) containing statespecs grouped in tuples, or list,
     |      or something else of your preference. A statespec is compound of
     |      one or more states and then a value.
     |  
     |  theme_create(self, themename, parent=None, settings=None)
     |      Creates a new theme.
     |      
     |      It is an error if themename already exists. If parent is
     |      specified, the new theme will inherit styles, elements and
     |      layouts from the specified parent theme. If settings are present,
     |      they are expected to have the same syntax used for theme_settings.
     |  
     |  theme_names(self)
     |      Returns a list of all known themes.
     |  
     |  theme_settings(self, themename, settings)
     |      Temporarily sets the current theme to themename, apply specified
     |      settings and then restore the previous theme.
     |      
     |      Each key in settings is a style and each value may contain the
     |      keys 'configure', 'map', 'layout' and 'element create' and they
     |      are expected to have the same format as specified by the methods
     |      configure, map, layout and element_create respectively.
     |  
     |  theme_use(self, themename=None)
     |      If themename is None, returns the theme in use, otherwise, set
     |      the current theme to themename, refreshes all widgets and emits
     |      a <<ThemeChanged>> event.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Treeview(Widget, tkinter.XView, tkinter.YView)
     |  Treeview(master=None, **kw)
     |  
     |  Ttk Treeview widget displays a hierarchical collection of items.
     |  
     |  Each item has a textual label, an optional image, and an optional list
     |  of data values. The data values are displayed in successive columns
     |  after the tree label.
     |  
     |  Method resolution order:
     |      Treeview
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      tkinter.XView
     |      tkinter.YView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Treeview with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus, xscrollcommand,
     |          yscrollcommand
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          columns, displaycolumns, height, padding, selectmode, show
     |      
     |      ITEM OPTIONS
     |      
     |          text, image, values, open, tags
     |      
     |      TAG OPTIONS
     |      
     |          foreground, background, font, image
     |  
     |  bbox(self, item, column=None)
     |      Returns the bounding box (relative to the treeview widget's
     |      window) of the specified item in the form x y width height.
     |      
     |      If column is specified, returns the bounding box of that cell.
     |      If the item is not visible (i.e., if it is a descendant of a
     |      closed item or is scrolled offscreen), returns an empty string.
     |  
     |  column(self, column, option=None, **kw)
     |      Query or modify the options for the specified column.
     |      
     |      If kw is not given, returns a dict of the column option values. If
     |      option is specified then the value for that option is returned.
     |      Otherwise, sets the options to the corresponding values.
     |  
     |  delete(self, *items)
     |      Delete all specified items and all their descendants. The root
     |      item may not be deleted.
     |  
     |  detach(self, *items)
     |      Unlinks all of the specified items from the tree.
     |      
     |      The items and all of their descendants are still present, and may
     |      be reinserted at another point in the tree, but will not be
     |      displayed. The root item may not be detached.
     |  
     |  exists(self, item)
     |      Returns True if the specified item is present in the tree,
     |      False otherwise.
     |  
     |  focus(self, item=None)
     |      If item is specified, sets the focus item to item. Otherwise,
     |      returns the current focus item, or '' if there is none.
     |  
     |  get_children(self, item=None)
     |      Returns a tuple of children belonging to item.
     |      
     |      If item is not specified, returns root children.
     |  
     |  heading(self, column, option=None, **kw)
     |      Query or modify the heading options for the specified column.
     |      
     |      If kw is not given, returns a dict of the heading option values. If
     |      option is specified then the value for that option is returned.
     |      Otherwise, sets the options to the corresponding values.
     |      
     |      Valid options/values are:
     |          text: text
     |              The text to display in the column heading
     |          image: image_name
     |              Specifies an image to display to the right of the column
     |              heading
     |          anchor: anchor
     |              Specifies how the heading text should be aligned. One of
     |              the standard Tk anchor values
     |          command: callback
     |              A callback to be invoked when the heading label is
     |              pressed.
     |      
     |      To configure the tree column heading, call this with column = "#0"
     |  
     |  identify(self, component, x, y)
     |      Returns a description of the specified component under the
     |      point given by x and y, or the empty string if no such component
     |      is present at that position.
     |  
     |  identify_column(self, x)
     |      Returns the data column identifier of the cell at position x.
     |      
     |      The tree column has ID #0.
     |  
     |  identify_element(self, x, y)
     |      Returns the element at position x, y.
     |      
     |      * Availability: Tk 8.6
     |  
     |  identify_region(self, x, y)
     |      Returns one of:
     |      
     |      heading: Tree heading area.
     |      separator: Space between two columns headings;
     |      tree: The tree area.
     |      cell: A data cell.
     |      
     |      * Availability: Tk 8.6
     |  
     |  identify_row(self, y)
     |      Returns the item ID of the item at position y.
     |  
     |  index(self, item)
     |      Returns the integer index of item within its parent's list
     |      of children.
     |  
     |  insert(self, parent, index, iid=None, **kw)
     |      Creates a new item and return the item identifier of the newly
     |      created item.
     |      
     |      parent is the item ID of the parent item, or the empty string
     |      to create a new top-level item. index is an integer, or the value
     |      end, specifying where in the list of parent's children to insert
     |      the new item. If index is less than or equal to zero, the new node
     |      is inserted at the beginning, if index is greater than or equal to
     |      the current number of children, it is inserted at the end. If iid
     |      is specified, it is used as the item identifier, iid must not
     |      already exist in the tree. Otherwise, a new unique identifier
     |      is generated.
     |  
     |  item(self, item, option=None, **kw)
     |      Query or modify the options for the specified item.
     |      
     |      If no options are given, a dict with options/values for the item
     |      is returned. If option is specified then the value for that option
     |      is returned. Otherwise, sets the options to the corresponding
     |      values as given by kw.
     |  
     |  move(self, item, parent, index)
     |      Moves item to position index in parent's list of children.
     |      
     |      It is illegal to move an item under one of its descendants. If
     |      index is less than or equal to zero, item is moved to the
     |      beginning, if greater than or equal to the number of children,
     |      it is moved to the end. If item was detached it is reattached.
     |  
     |  next(self, item)
     |      Returns the identifier of item's next sibling, or '' if item
     |      is the last child of its parent.
     |  
     |  parent(self, item)
     |      Returns the ID of the parent of item, or '' if item is at the
     |      top level of the hierarchy.
     |  
     |  prev(self, item)
     |      Returns the identifier of item's previous sibling, or '' if
     |      item is the first child of its parent.
     |  
     |  reattach = move(self, item, parent, index)
     |  
     |  see(self, item)
     |      Ensure that item is visible.
     |      
     |      Sets all of item's ancestors open option to True, and scrolls
     |      the widget if necessary so that item is within the visible
     |      portion of the tree.
     |  
     |  selection(self, selop=<object object at 0x1026780a0>, items=None)
     |      Returns the tuple of selected items.
     |  
     |  selection_add(self, *items)
     |      Add all of the specified items to the selection.
     |  
     |  selection_remove(self, *items)
     |      Remove all of the specified items from the selection.
     |  
     |  selection_set(self, *items)
     |      The specified items becomes the new selection.
     |  
     |  selection_toggle(self, *items)
     |      Toggle the selection state of each specified item.
     |  
     |  set(self, item, column=None, value=None)
     |      Query or set the value of given item.
     |      
     |      With one argument, return a dictionary of column/value pairs
     |      for the specified item. With two arguments, return the current
     |      value of the specified column. With three arguments, set the
     |      value of given column in given item to the specified value.
     |  
     |  set_children(self, item, *newchildren)
     |      Replaces item's child with newchildren.
     |      
     |      Children present in item that are not present in newchildren
     |      are detached from tree. No items in newchildren may be an
     |      ancestor of item.
     |  
     |  tag_bind(self, tagname, sequence=None, callback=None)
     |      Bind a callback for the given event sequence to the tag tagname.
     |      When an event is delivered to an item, the callbacks for each
     |      of the item's tags option are called.
     |  
     |  tag_configure(self, tagname, option=None, **kw)
     |      Query or modify the options for the specified tagname.
     |      
     |      If kw is not given, returns a dict of the option settings for tagname.
     |      If option is specified, returns the value for that option for the
     |      specified tagname. Otherwise, sets the options to the corresponding
     |      values for the given tagname.
     |  
     |  tag_has(self, tagname, item=None)
     |      If item is specified, returns 1 or 0 depending on whether the
     |      specified item has the given tagname. Otherwise, returns a list of
     |      all items which have the specified tag.
     |      
     |      * Availability: Tk 8.6
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  
     |  instate(self, statespec, callback=None, *args, **kw)
     |      Test the widget's state.
     |      
     |      If callback is not specified, returns True if the widget state
     |      matches statespec and False otherwise. If callback is specified,
     |      then it will be invoked with *args, **kw if the widget state
     |      matches statespec. statespec is expected to be a sequence.
     |  
     |  state(self, statespec=None)
     |      Modify or inquire widget state.
     |      
     |      Widget state is returned if statespec is None, otherwise it is
     |      set according to the statespec flags and then a new state spec
     |      is returned indicating which flags were changed. statespec is
     |      expected to be a sequence.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  location = grid_location(self, x, y)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.XView:
     |  
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.YView:
     |  
     |  yview(self, *args)
     |      Query and change the vertical position of the view.
     |  
     |  yview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |  
     |  yview_scroll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).

FUNCTIONS
    setup_master(master=None)
        If master is not None, itself is returned. If master is None,
        the default master is returned if there is one, otherwise a new
        master is created and returned.
        
        If it is not allowed to use the default root and master is None,
        RuntimeError is raised.
    
    tclobjs_to_py(adict)
        Returns adict with its values converted from Tcl objects to Python
        objects.

DATA
    __all__ = ['Button', 'Checkbutton', 'Combobox', 'Entry', 'Frame', 'Lab...

VERSION
    0.3.1

AUTHOR
    Guilherme Polo <ggpolo@gmail.com>

FILE
    /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/tkinter/ttk.py


None
[Finished in 0.7s]